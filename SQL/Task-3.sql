USE TechShop;
GO

-- 1. Write an SQL query to retrieve a list of all orders along with customer information (e.g., customer name) for each order.
SELECT o.OrderID, o.CustomerID, (c.FirstName + ' ' + c.LastName) Name, c.Email, c.Phone, c.Address, o.OrderDate, o.TotalAmount, o.Status
FROM Orders o
JOIN Customers c
ON o.CustomerID = c.CustomerID;

-- 2. Write an SQL query to find the total revenue generated by each electronic gadget product. Include the product name and the total revenue.
SELECT p.ProductName, SUM(od.Quantity * p.price) TotalRevenue
FROM Products p
JOIN OrderDetails od
ON p.ProductID = od.ProductID
GROUP BY ProductName;

-- 3. Write an SQL query to list all customers who have made at least one purchase. Include their names and contact information.
SELECT FirstName, LastName, Email, Phone, Address FROM Customers WHERE OrdersCount >= 1;

-- 4. Write an SQL query to find the most popular electronic gadget, which is the one with the highest total quantity ordered. Include the product name and the total quantity ordered.
SELECT TOP 1 p.ProductName, SUM(od.Quantity) NoOfOrders
FROM Products p
JOIN OrderDetails od
ON p.ProductID = od.ProductID
GROUP BY p.ProductName
ORDER BY NoOfOrders DESC;

-- 5.Write an SQL query to retrieve a list of electronic gadgets along with their corresponding categories.
CREATE TABLE Categories (
	CategoryID NUMERIC PRIMARY KEY IDENTITY(1000001, 1),
	CategoryName VARCHAR(50)
);

INSERT INTO Categories (CategoryName)
VALUES 
('Mobile Phones'),
('Computers'),
('Audio Devices'),
('Wearables'),
('Gaming Devices'),
('Peripherals'),
('Storage Devices'),
('Displays');

SELECT * from Categories;
SELECT * from Products;

ALTER TABLE Products
ADD CategoryID NUMERIC;

ALTER TABLE Products
ADD CONSTRAINT FK_Products_CategoryID
FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID)
ON DELETE CASCADE;
GO

SP_HELP Products;
GO
	--Manually set CategoryID from MS SQL SERVER

SELECT p.ProductName, c.CategoryName
FROM Products p
JOIN Categories c
ON p.CategoryID = c.CategoryID;

-- 6. Write an SQL query to calculate the average order value for each customer. Include the customer's name and their average order value.
SELECT (c.FirstName + ' ' + c.LastName) Name, AVG(o.TotalAmount) as AvgOrderValue
FROM Customers c
JOIN Orders o
ON c.CustomerID = o.CustomerID
GROUP BY c.FirstName, c.LastName;

-- 7. Write an SQL query to find the order with the highest total revenue. Include the order ID, customer information, and the total revenue.
SELECT TOP 1 c.CustomerID, (c.FirstName + ' ' + c.LastName) Name, c.Email, c.Phone, o.OrderID, o.TotalAmount
FROM Customers c
JOIN Orders o
ON c.CustomerID = o.CustomerID
ORDER BY TotalAmount DESC;

-- 8. Write an SQL query to list electronic gadgets and the number of times each product has been ordered.
SELECT p.ProductName, COUNT(p.ProductName) NoOfOrders
FROM Products p
JOIN OrderDetails od
ON p.ProductID = od.ProductID
GROUP BY p.ProductName;

-- 9. Write an SQL query to find customers who have purchased a specific electronic gadget product. Allow users to input the product name as a parameter.
	/* SELECT (c.FirstName + ' ' + c.LastName) Name , o.OrderID, p.ProductName
	FROM Customers c
	JOIN Orders o
	ON c.CustomerID = o.CustomerID
	JOIN OrderDetails od
	ON o.OrderID = od.OrderID
	JOIN Products p
	ON p.ProductID = od.ProductID; */ -- customer name and what customers have purchased

SELECT (c.FirstName + ' ' + c.LastName) Name , o.OrderID, p.ProductName
FROM Customers c
JOIN Orders o
ON c.CustomerID = o.CustomerID
JOIN OrderDetails od
ON o.OrderID = od.OrderID
JOIN Products p
ON p.ProductID = od.ProductID
WHERE p.ProductName = 'Gaming Console';

-- 10. Write an SQL query to calculate the total revenue generated by all orders placed within a specific time period. Allow users to input the start and end dates as parameters.
SELECT SUM(TotalAmount) TotalRevenue
FROM Orders 
WHERE OrderDate BETWEEN '2024-09-14' AND '2024-09-18';


