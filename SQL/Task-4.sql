USE TechShop;
GO

-- 1. Write an SQL query to find out which customers have not placed any orders.
/*SELECT c.CustomerID, (c.FirstName + ' ' + c.LastName) Name, c.Email, c.Phone 
FROM Customers c 
WHERE c.OrdersCount=0; */  

SELECT c.CustomerID, (c.FirstName + ' ' + c.LastName) Name, c.Email, c.Phone
FROM Customers c
EXCEPT
SELECT  c.CustomerID, (c.FirstName + ' ' + c.LastName) Name, c.Email, c.Phone
FROM Customers c
JOIN Orders o
ON c.CustomerID=o.CustomerID;

-- 2. Write an SQL query to find the total number of products available for sale.
SELECT count(ProductID) TotalProducts
FROM Products;

-- 3. Write an SQL query to calculate the total revenue generated by TechShop.
SELECT SUM(p.Price*od.Quantity) TotalRevenue
FROM Products p
JOIN OrderDetails od
ON p.ProductID = od.ProductID;

-- 4. Write an SQL query to calculate the average quantity ordered for products in a specific category. Allow users to input the category name as a parameter.
SELECT p.ProductName, AVG(od.Quantity) AvgQuantity
FROM Products p
JOIN OrderDetails od
ON p.ProductID = od.ProductID
JOIN Categories c
ON c.CategoryID = p.CategoryID
WHERE c.CategoryName = 'Mobile Phones'
GROUP BY p.ProductName;

-- 5. Write an SQL query to calculate the total revenue generated by a specific customer. Allow users to input the customer ID as a parameter.
SELECT c.CustomerID, (c.FirstName + ' ' + c.LastName) Name, o.TotalAmount TotalRevenue
FROM Customers c
JOIN Orders o
On o.CustomerID = c.CustomerID
WHERE c.CustomerID = 11;

 -- 6. Write an SQL query to find the customers who have placed the most orders. List their names and the number of orders they've placed.
 SELECT CustomerID, (FirstName + ' ' + LastName) Name, OrdersCount
 FROM Customers 
 WHERE OrdersCount = (
	SELECT MAX(OrdersCount) 
	FROM Customers
 );

-- 7. Write an SQL query to find the most popular product category, which is the one with the highest total quantity ordered across all orders.
	-- M1
SELECT TOP 1 c.CategoryName, SUM(od.Quantity) OrderCount
FROM Products p
JOIN OrderDetails od
ON p.ProductID = od.ProductID
JOIN Categories c
ON c.CategoryID = p.CategoryID
GROUP BY c.CategoryName
ORDER BY OrderCount DESC;


	-- M2
SELECT c.CategoryName, SUM(od.Quantity) OrderCount
FROM Products p
JOIN OrderDetails od
ON p.ProductID = od.ProductID
JOIN Categories c
ON c.CategoryID = p.CategoryID
GROUP BY c.CategoryName
HAVING SUM(od.Quantity) = (
	Select MAX(OrderCount)
	FROM (
		SELECT SUM(od.Quantity) OrderCount
		FROM Products p
		JOIN OrderDetails od
		ON p.ProductID = od.ProductID
		JOIN Categories c
		ON c.CategoryID = p.CategoryID
		GROUP BY c.CategoryName
	) CategoryOrderCount
);

-- 8. Write an SQL query to find the customer who has spent the most money (highest total revenue) on electronic gadgets. List their name and total spending.
SELECT c.CustomerID, (c.FirstName + ' ' + c.LastName) Name, SUM(od.Quantity * p.Price) TotalSpending
FROM Customers c
JOIN Orders o
ON c.CustomerID = o.CustomerID
JOIN OrderDetails od
ON o.OrderID = od.OrderID
JOIN Products p
ON p.ProductID = od.ProductID
GROUP BY c.CustomerID, (c.FirstName + ' ' + c.LastName)
HAVING SUM(od.Quantity * p.Price) = (
	SELECT MAX(TotalSpending)
	FROM (
		SELECT SUM(od.Quantity * p.Price) TotalSpending
		FROM Customers c
		JOIN Orders o
		ON c.CustomerID = o.CustomerID
		JOIN OrderDetails od
		ON o.OrderID = od.OrderID
		JOIN Products p
		ON p.ProductID = od.ProductID
		GROUP BY c.CustomerID
	) TotalSpendingByCustomers
);

-- 9. Write an SQL query to calculate the average order value (total revenue divided by the number of orders) for all customers.
SELECT	SUM(TotalAmount)/Count(OrderID) AvgOrderValue FROM Orders;

SELECT  SUM(od.Quantity*p.Price)/COUNT(DISTINCT o.OrderID) AvgOrderValue -- DISTINCT because 1 order can have multiple OrderDetails
FROM Products p
JOIN OrderDetails od
ON p.ProductID = od.ProductID
JOIN Orders o
ON o.OrderID = od.OrderID;

-- 10. Write an SQL query to find the total number of orders placed by each customer and list their names along with the order count.
SELECT c.CustomerID, (c.FirstName + ' ' + c.LastName) Name, o.OrderID, COUNT(o.OrderID) TotalOrders
FROM Customers c
LEFT JOIN Orders o --LEFT JOIN because some customers didn't order anything
ON c.CustomerID = o.CustomerID
GROUP BY c.CustomerID, (c.FirstName + ' ' + c.LastName), o.OrderID;


